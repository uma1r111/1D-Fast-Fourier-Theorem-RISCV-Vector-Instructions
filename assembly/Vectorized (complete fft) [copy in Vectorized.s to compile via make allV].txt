#define STDOUT 0xd0580000

.section .text
.global _start
_start:
    ## START YOUR CODE HERE
    la t0, real             # original real[]
    la t1, imag             # original imag[]
    la t2, bitrev_indices   # bitrev table base
    la t3, rev_real         # reversed real[]
    la t4, rev_imag         # reversed imag[]

    li t5, 0                # i = 0
bitrev_loop:
    li t6, 128
    bge t5, t6, end_bitrev

    slli s4, t5, 2          # i * 4
    add s5, t2, s4          # bitrev + 4*i
    lw s6, 0(s5)            # bitrev[i] → s6

    slli s7, s6, 2          # rev_index * 4
    flw ft0, 0(t0)          # real[i]
    flw ft1, 0(t1)          # imag[i]

    add s8, t3, s7          # addr = rev_real + rev_index * 4
    add s9, t4, s7          # addr = rev_imag + rev_index * 4

    fsw ft0, 0(s8)          # store to rev_real[bitrev[i]]
    fsw ft1, 0(s9)          # store to rev_imag[bitrev[i]]

    addi t0, t0, 4
    addi t1, t1, 4
    addi t5, t5, 1
    j bitrev_loop
end_bitrev:

    # ----------------------------- STEP 1: Set constants & pointers -----------------------------

    li t5, 128                # t5 = N (FFT size) t5 holds N = 128
    li t6, 7                  # t6 = log2(N)      t6 holds log2(N) = 7, which will be used to control FFT stages.

    la s0, rev_real           # s0 = base pointer to rev_real[]
    la s1, rev_imag           # s1 = base pointer to rev_imag[]
    la s2, twiddle_real       # s2 = base pointer to twiddle_real[]
    la s3, twiddle_imag       # s3 = base pointer to twiddle_imag[]

    # s0–s3 hold pointers to the reversed input arrays and the twiddle factor tables.

    # ----------------------------- STEP 2: Outer Loop Over Stages -----------------------------
    li s4, 1                  # s = 1 (stage counter)
outer_stage_loop:
    bgt s4, t6, end_fft_stages   # if s > log2(N), exit    #stage counter s (1 to 7) 2^7=128

    # m = 2^s
    li s5, 1
    sll s5, s5, s4              # s5 = m = 1 << s

    #m = 2^s (Size of FFT block at stage s)
    #Purpose: Defines the width of the butterfly computation block in the current stage.
    #As s increases from 1 to 7 (for N=128), m goes from 2 → 4 → 8 … → 128.
    #This tells you how many elements each butterfly block operates on.

    # half_m = m / 2
    srli s6, s5, 1              # s6 = half_m (half block size)

    #Purpose: Determines how many butterflies (pairwise operations) are in each block.
    #we perform half_m butterfly computations in each m-sized FFT block.
    #For example:
    #When m = 8, half_m = 4, we compute 4 butterflies per block.

    # twiddle_stride = N / m = 128 / m
    li s7, 128
    div s8, s7, s5              # s8 = twiddle_stride

    #Purpose: Controls how to index into the twiddle factor tables (twiddle_real, twiddle_imag).
    #we compute the index into the twiddle factor arrays as: 
    #twiddle_index = butterfly_index * twiddle_stride
    #So for stage s, if twiddle_stride = 16, the butterflies within that stage use 
    #twiddles at index 0, 16, 32, ... depending on the butterfly number.


    #For stage s = 3, so m = 8, half_m = 4, twiddle_stride = 128 / 8 = 16:
    #We process FFT blocks of 8 values. Each block has 4 butterflies.
    #For each butterfly, you multiply one input by a complex twiddle factor, selected by butterfly_index * 16.

    # ----------------------------- STEP 3: Outer Loop Over FFT Blocks -----------------------------

    li t6, 0             # i = 0 (start index of FFT block)

    outer_i_loop:
    bge t6, t5, end_outer_i_loop    # if i >= N, exit

    li s9, 0               # j = 0 (butterfly index within block)


    #For each FFT stage:
    #break the data into blocks of size m = 2^s.
    #inside each block, you perform half_m = m / 2 butterfly computations.
    #each butterfly uses a twiddle factor determined by k = j * twiddle_stride

    li s9, 0               # j = 0
inner_butterfly_loop:
    bge s9, s6, end_inner_butterfly  # if j >= half_m, exit

    mul s10, s9, s8        # k = j * twiddle_stride
    slli s11, s10, 2       # k * 4 (byte offset)

    add t0, s2, s11        # addr = &twiddle_real[k]
    flw ft0, 0(t0)         # twiddle_real[k] -> ft0
                                                        #ft0, ft1 = twiddle factor for current butterfly
    add t1, s3, s11        # addr = &twiddle_imag[k]
    flw ft1, 0(t1)         # twiddle_imag[k] -> ft1

    # ----------------------------- Step 4: Load Vector Data -----------------------------  

    # Compute addresses for rev_real[i + j] and rev_real[i + j + half_m]
    # assume base address of rev_real in a0, rev_imag in a1
    # and i in t10 (start of current butterfly group)

    #This step involves loading vector data using the vle32.v instruction (Vector Load Word), specifically:
    #Top Half (first butterfly input):
    #    rev_real[i]
    #    rev_imag[i]
    #Bottom Half (second butterfly input):
    #    rev_real[i + half_m]
    #    rev_imag[i + half_m]

    mv a0, s0              # Set rev_real base
    mv a1, s1              # Set rev_imag base
    # li t2, 0               # Initialize i (FFT block start index)

    add t3, t6, s9         # t3 = i + j
    slli t4, t3, 2         # byte offset = (i + j) * 4

    add t5, a0, t4         # addr_real_top = &rev_real[i + j]
    vsetvli zero, t5, e32  # Set vector length
    vle32.v v0, (t5)       # load top real values into v0

    add t5, a1, t4         # addr_imag_top = &rev_imag[i + j]
    vle32.v v2, (t5)       # load top imag values into v2

    add t3, t3, s6         # t3 = i + j + half_m
    slli t4, t3, 2         # byte offset = (i + j + half_m) * 4

    add t5, a0, t4         # addr_real_bot = &rev_real[i + j + half_m]
    vle32.v v1, (t5)       # load bottom real values into v1

    add t5, a1, t4         # addr_imag_bot = &rev_imag[i + j + half_m]
    vle32.v v3, (t5)       # load bottom imag values into v3

    # ----------------------------- Step 5 & 6: Butterfly Computation -----------------------------
    
    #Vector Complex Multiplication for each element

    #tmp_real = br * wr - bi * wi
    #tmp_imag = br * wi + bi * wr
    # where:
    # br, bi: bottom real/imag
    # wr, wi: twiddle real/imag

    # Compute t_r = w_r * b_r - w_i * b_i
    vfmul.vf v4, v1, ft0        # v4 = w_r * b_r
    vfmul.vf v5, v3, ft1        # v5 = w_i * b_i
    vfsub.vv v6, v4, v5         # v6 = t_r

    # Compute t_i = w_r * b_i + w_i * b_r
    vfmul.vf v4, v3, ft0        # v4 = w_r * b_i
    vfmul.vf v5, v1, ft1        # v5 = w_i * b_r
    vfadd.vv v7, v4, v5         # v7 = t_i

    #Butterfly Operation Computation  

    #rev_real[i]       = tr + tmp_real
    #rev_imag[i]       = ti + tmp_imag
    #rev_real[i+m/2]   = tr - tmp_real
    #rev_imag[i+m/2]   = ti - tmp_imag
    #tr, ti: top real/imag values  

    # Compute new top values
    vfadd.vv v8, v0, v6         # v8 = a_r + t_r
    vfadd.vv v9, v2, v7         # v9 = a_i + t_i

    # Compute new bottom values
    vfsub.vv v10, v0, v6        # v10 = a_r - t_r
    vfsub.vv v11, v2, v7        # v11 = a_i - t_i

    # ----------------------------- Step 7: Store Back Result -----------------------------

    # Store top values: v8 (real), v9 (imag)
    # Address: &rev_real[i + j] and &rev_imag[i + j]
    add t3, t6, s9           # t3 = i + j
    slli t4, t3, 2            # offset = (i + j) * 4
    add t5, s0, t4            # addr_real_top = &rev_real[i + j]
    vse32.v v8, (t5)          # store top real result

    add t5, s1, t4            # addr_imag_top = &rev_imag[i + j]
    vse32.v v9, (t5)          # store top imag result

    # Store bottom values: v10 (real), v11 (imag)
    # Address: &rev_real[i + j + half_m] and &rev_imag[i + j + half_m]
    add t3, t3, s6            # t3 = i + j + half_m
    slli t4, t3, 2            # offset = (i + j + half_m) * 4
    add t5, s0, t4            # addr_real_bot = &rev_real[i + j + half_m]
    vse32.v v10, (t5)         # store bottom real result

    add t5, s1, t4            # addr_imag_bot = &rev_imag[i + j + half_m]
    vse32.v v11, (t5)         # store bottom imag result


    addi s9, s9, 1         # j++
    j inner_butterfly_loop
end_inner_butterfly:
    add t6, t6, s5        # i += m
    j outer_i_loop

end_outer_i_loop:
    addi s4, s4, 1         # s++
    j outer_stage_loop

end_fft_stages:


    # OPTIONAL: log results
    la a0, rev_real
    li a1, 128
    # call printToLogVectorized

    j _finish

# Function: _finish
_finish:
    li x3, 0xd0580000
    addi x5, x0, 0xff
    sb x5, 0(x3)
    beq x0, x0, _finish

    .rept 100
        nop
    .endr


.section .data
.align 4
real:
.float 0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343

imag:
.rept 128
    .float 0.0
.endr

rev_real: .space 512
rev_imag: .space 512

bitrev_indices:
.word 0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120, 4, 68, 36, 100, 20, 84, 52, 116, 12, 76, 44, 108, 28, 92, 60, 124, 2, 66, 34, 98, 18, 82, 50, 114, 10, 74, 42, 106, 26, 90, 58, 122, 6, 70, 38, 102, 22, 86, 54, 118, 14, 78, 46, 110, 30, 94, 62, 126, 1, 65, 33, 97, 17, 81, 49, 113, 9, 73, 41, 105, 25, 89, 57, 121, 5, 69, 37, 101, 21, 85, 53, 117, 13, 77, 45, 109, 29, 93, 61, 125, 3, 67, 35, 99, 19, 83, 51, 115, 11, 75, 43, 107, 27, 91, 59, 123, 7, 71, 39, 103, 23, 87, 55, 119, 15, 79, 47, 111, 31, 95, 63, 127

twiddle_real:
.float 1.00000000, 0.99879546, 0.99518473, 0.98917651, 0.98078528, 0.97003125, 0.95694034, 0.94154407, 0.92387953, 0.90398929, 0.88192126, 0.85772861, 0.83146961, 0.80320753, 0.77301045, 0.74095113, 0.70710678, 0.67155895, 0.63439328, 0.59569930, 0.55557023, 0.51410274, 0.47139674, 0.42755509, 0.38268343, 0.33688985, 0.29028468, 0.24298018, 0.19509032, 0.14673047, 0.09801714, 0.04906767, 0.00000000, -0.04906767, -0.09801714, -0.14673047, -0.19509032, -0.24298018, -0.29028468, -0.33688985, -0.38268343, -0.42755509, -0.47139674, -0.51410274, -0.55557023, -0.59569930, -0.63439328, -0.67155895, -0.70710678, -0.74095113, -0.77301045, -0.80320753, -0.83146961, -0.85772861, -0.88192126, -0.90398929, -0.92387953, -0.94154407, -0.95694034, -0.97003125, -0.98078528, -0.98917651, -0.99518473, -0.99879546

twiddle_imag:
.float -0.00000000, -0.04906767, -0.09801714, -0.14673047, -0.19509032, -0.24298018, -0.29028468, -0.33688985, -0.38268343, -0.42755509, -0.47139674, -0.51410274, -0.55557023, -0.59569930, -0.63439328, -0.67155895, -0.70710678, -0.74095113, -0.77301045, -0.80320753, -0.83146961, -0.85772861, -0.88192126, -0.90398929, -0.92387953, -0.94154407, -0.95694034, -0.97003125, -0.98078528, -0.98917651, -0.99518473, -0.99879546, -1.00000000, -0.99879546, -0.99518473, -0.98917651, -0.98078528, -0.97003125, -0.95694034, -0.94154407, -0.92387953, -0.90398929, -0.88192126, -0.85772861, -0.83146961, -0.80320753, -0.77301045, -0.74095113, -0.70710678, -0.67155895, -0.63439328, -0.59569930, -0.55557023, -0.51410274, -0.47139674, -0.42755509, -0.38268343, -0.33688985, -0.29028468, -0.24298018, -0.19509032, -0.14673047, -0.09801714, -0.04906767

size: .word 128