#define STDOUT 0xd0580000

.section .text
.global _start
_start:
    ## START YOUR CODE HERE
    la t0, real             # original real[]
    la t1, imag             # original imag[]
    la t2, bitrev_indices   # bitrev table base
    la t3, rev_real         # reversed real[]
    la t4, rev_imag         # reversed imag[]

    li t5, 0                # i = 0
bitrev_loop:
    li t6, 128
    bge t5, t6, end_bitrev

    slli s4, t5, 2          # i * 4
    add s5, t2, s4          # bitrev + 4*i
    lw s6, 0(s5)            # bitrev[i] â†’ s6

    slli s7, s6, 2          # rev_index * 4
    flw ft0, 0(t0)          # real[i]
    flw ft1, 0(t1)          # imag[i]

    add s8, t3, s7          # addr = rev_real + rev_index * 4
    add s9, t4, s7          # addr = rev_imag + rev_index * 4

    fsw ft0, 0(s8)          # store to rev_real[bitrev[i]]
    fsw ft1, 0(s9)          # store to rev_imag[bitrev[i]]

    addi t0, t0, 4
    addi t1, t1, 4
    addi t5, t5, 1
    j bitrev_loop
end_bitrev:

    # ----------------------------- STEP 1: Set constants & pointers -----------------------------
    li t5, 128                # t5 = N (FFT size)
    li t6, 7                  # t6 = log2(N)

    la s0, rev_real           # s0 = base pointer to rev_real[]
    la s1, rev_imag           # s1 = base pointer to rev_imag[]
    la s2, twiddle_real       # s2 = base pointer to twiddle_real[]
    la s3, twiddle_imag       # s3 = base pointer to twiddle_imag[]

    # ----------------------------- STEP 2: Outer Loop Over Stages -----------------------------
    li s4, 1                  # s = 1 (stage counter)
outer_stage_loop:
    bgt s4, t6, end_fft_stages   # if s > log2(N), exit

    # m = 2^s
    li s5, 1
    sll s5, s5, s4              # s5 = m = 1 << s

    # half_m = m / 2
    srli s6, s5, 1              # s6 = half_m

    # twiddle_stride = N / m = 128 / m
    li s7, 128
    div s8, s7, s5              # s8 = twiddle_stride

    # ----------------------------- STEP 3: Inner Loop Over FFT Blocks -----------------------------
    li s9, 0               # j = 0
inner_butterfly_loop:
    bge s9, s6, end_inner_butterfly  # if j >= half_m, exit

    mul s10, s9, s8        # k = j * twiddle_stride
    slli s11, s10, 2       # k * 4 (byte offset)

    add t0, s2, s11        # addr = &twiddle_real[k]
    flw ft0, 0(t0)         # twiddle_real[k] -> ft0
    add t1, s3, s11        # addr = &twiddle_imag[k]
    flw ft1, 0(t1)         # twiddle_imag[k] -> ft1

    # ----------------------------- Step 4: Load Vector Data -----------------------------  
    mv a0, s0              # Set rev_real base
    mv a1, s1              # Set rev_imag base
    li t2, 0               # Initialize i (FFT block start index)

    add t3, t2, s9         # t3 = i + j
    slli t4, t3, 2         # byte offset = (i + j) * 4

    add t5, a0, t4         # addr_real_top = &rev_real[i + j]
    vsetvli zero, t5, e32  # Set vector length
    vle32.v v0, (t5)       # load top real values into v0

    add t5, a1, t4         # addr_imag_top = &rev_imag[i + j]
    vle32.v v2, (t5)       # load top imag values into v2

    add t3, t3, s6         # t3 = i + j + half_m
    slli t4, t3, 2         # byte offset = (i + j + half_m) * 4

    add t5, a0, t4         # addr_real_bot = &rev_real[i + j + half_m]
    vle32.v v1, (t5)       # load bottom real values into v1

    add t5, a1, t4         # addr_imag_bot = &rev_imag[i + j + half_m]
    vle32.v v3, (t5)       # load bottom imag values into v3

    addi s9, s9, 1         # j++
    j inner_butterfly_loop
end_inner_butterfly:

    addi s4, s4, 1         # s++
    j outer_stage_loop
end_fft_stages:

    # OPTIONAL: log results
    la a0, rev_real
    li a1, 128
    # call printToLogVectorized

    j _finish

# Function: _finish
_finish:
    li x3, 0xd0580000
    addi x5, x0, 0xff
    sb x5, 0(x3)
    beq x0, x0, _finish

    .rept 100
        nop
    .endr


.section .data
.align 4
real:
.float 0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343
.float -0.00000000, 0.38268343, 0.70710678, 0.92387953, 1.00000000, 0.92387953, 0.70710678, 0.38268343
.float 0.00000000, -0.38268343, -0.70710678, -0.92387953, -1.00000000, -0.92387953, -0.70710678, -0.38268343

imag:
.rept 128
    .float 0.0
.endr

rev_real: .space 512
rev_imag: .space 512

bitrev_indices:
.word 0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120, 4, 68, 36, 100, 20, 84, 52, 116, 12, 76, 44, 108, 28, 92, 60, 124, 2, 66, 34, 98, 18, 82, 50, 114, 10, 74, 42, 106, 26, 90, 58, 122, 6, 70, 38, 102, 22, 86, 54, 118, 14, 78, 46, 110, 30, 94, 62, 126, 1, 65, 33, 97, 17, 81, 49, 113, 9, 73, 41, 105, 25, 89, 57, 121, 5, 69, 37, 101, 21, 85, 53, 117, 13, 77, 45, 109, 29, 93, 61, 125, 3, 67, 35, 99, 19, 83, 51, 115, 11, 75, 43, 107, 27, 91, 59, 123, 7, 71, 39, 103, 23, 87, 55, 119, 15, 79, 47, 111, 31, 95, 63, 127

twiddle_real:
.float 1.00000000, 0.99879546, 0.99518473, 0.98917651, 0.98078528, 0.97003125, 0.95694034, 0.94154407, 0.92387953, 0.90398929, 0.88192126, 0.85772861, 0.83146961, 0.80320753, 0.77301045, 0.74095113, 0.70710678, 0.67155895, 0.63439328, 0.59569930, 0.55557023, 0.51410274, 0.47139674, 0.42755509, 0.38268343, 0.33688985, 0.29028468, 0.24298018, 0.19509032, 0.14673047, 0.09801714, 0.04906767, 0.00000000, -0.04906767, -0.09801714, -0.14673047, -0.19509032, -0.24298018, -0.29028468, -0.33688985, -0.38268343, -0.42755509, -0.47139674, -0.51410274, -0.55557023, -0.59569930, -0.63439328, -0.67155895, -0.70710678, -0.74095113, -0.77301045, -0.80320753, -0.83146961, -0.85772861, -0.88192126, -0.90398929, -0.92387953, -0.94154407, -0.95694034, -0.97003125, -0.98078528, -0.98917651, -0.99518473, -0.99879546

twiddle_imag:
.float -0.00000000, -0.04906767, -0.09801714, -0.14673047, -0.19509032, -0.24298018, -0.29028468, -0.33688985, -0.38268343, -0.42755509, -0.47139674, -0.51410274, -0.55557023, -0.59569930, -0.63439328, -0.67155895, -0.70710678, -0.74095113, -0.77301045, -0.80320753, -0.83146961, -0.85772861, -0.88192126, -0.90398929, -0.92387953, -0.94154407, -0.95694034, -0.97003125, -0.98078528, -0.98917651, -0.99518473, -0.99879546, -1.00000000, -0.99879546, -0.99518473, -0.98917651, -0.98078528, -0.97003125, -0.95694034, -0.94154407, -0.92387953, -0.90398929, -0.88192126, -0.85772861, -0.83146961, -0.80320753, -0.77301045, -0.74095113, -0.70710678, -0.67155895, -0.63439328, -0.59569930, -0.55557023, -0.51410274, -0.47139674, -0.42755509, -0.38268343, -0.33688985, -0.29028468, -0.24298018, -0.19509032, -0.14673047, -0.09801714, -0.04906767

size: .word 128